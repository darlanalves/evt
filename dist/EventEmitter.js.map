{"version":3,"file":"EventEmitter.js","sources":["EventEmitter.js"],"names":["global","_getEventNames","events","list","String","replace","trimRe","split","eventSplitRe","$getEventListeners","eventName","callbacks","this","$callbacks","$addListenerToEvent","eventConfig","name","Error","call","push","createListEventConfig","callback","context","params","eventList","result","shift","undefined","getDefaultParams","args","length","slice","addListeners","arguments","listEventConfig","me","off","addOnceListeners","once","removeListeners","removeAllListenersOfName","$removeListenersOfName","listenerList","newList","index","len","$triggerEventsOfName","listeners","paramsLen","concat","apply","triggerEvents","pauseEvents","max","factory","EventEmitter","Array","prototype","constructor","getListeners","clearListeners","on","emit","suspendEvents","resumeEvents","angular","module","define","amd","exports"],"mappings":"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","sourcesContent":["(function(global) {\n\t/* jshint validthis: true */\n\t'use strict';\n\t/**\n\t * Simple event emitter, cancellable with \"return false\" statement\n\t *\n\t * @class EventEmitter\n\t * @author Darlan Alves <me@darlanalv.es>\n\t */\n\tvar EventEmitter = function EventEmitter() {},\n\t\tslice = Array.prototype.slice,\n\t\teventSplitRe = / |, /,\n\t\ttrimRe = /^\\s+|\\s+$/g;\n\n\tfunction _getEventNames(events) {\n\t\tvar list = String(events).replace(trimRe, '').split(eventSplitRe);\n\t\treturn list;\n\t}\n\n\tfunction $getEventListeners(eventName) {\n\t\tvar callbacks = this.$callbacks || (this.$callbacks = {});\n\n\t\tif (eventName) {\n\t\t\treturn callbacks[eventName] || (callbacks[eventName] = []);\n\t\t}\n\n\t\treturn callbacks;\n\t}\n\n\tfunction $addListenerToEvent(eventConfig) {\n\t\tif (!eventConfig.name) throw new Error('Missing event name');\n\n\t\tvar callbacks = $getEventListeners.call(this, eventConfig.name);\n\n\t\tdelete eventConfig.name;\n\t\tcallbacks.push(eventConfig);\n\n\t\t// TODO replace while(true) with while(i--)?\n\n\t\treturn eventConfig;\n\t}\n\n\tfunction createListEventConfig(events, callback, context, params) {\n\t\tif (!(events && callback && typeof callback === 'function')) {\n\t\t\treturn [];\n\t\t}\n\n\t\tvar eventName, eventConfig, eventList = _getEventNames(events),\n\t\t\tresult = [];\n\n\t\twhile (true) {\n\t\t\teventName = eventList.shift();\n\t\t\tif (eventName === undefined) break;\n\n\t\t\teventConfig = {\n\t\t\t\tname: eventName,\n\t\t\t\tcallback: callback,\n\t\t\t\tcontext: context || null,\n\t\t\t\tparams: params\n\t\t\t};\n\n\t\t\tresult.push(eventConfig);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tfunction getDefaultParams(args) {\n\t\treturn args.length > 3 ? slice.call(args, 3) : false;\n\t}\n\n\tfunction addListeners(events, callback, context) {\n\t\tvar params = getDefaultParams(arguments),\n\t\t\tlistEventConfig = createListEventConfig(events, callback, context, params),\n\t\t\teventConfig,\n\t\t\tme = this;\n\n\t\twhile (true) {\n\t\t\teventConfig = listEventConfig.shift();\n\t\t\tif (eventConfig === undefined) break;\n\n\t\t\t$addListenerToEvent.call(this, eventConfig);\n\t\t}\n\n\t\treturn function() {\n\t\t\tme.off(events, callback, context);\n\t\t};\n\t}\n\n\tfunction addOnceListeners(events, callback, context) {\n\t\tvar params = getDefaultParams(arguments),\n\t\t\tlistEventConfig = createListEventConfig(events, callback, context, params),\n\t\t\teventConfig;\n\n\t\twhile (true) {\n\t\t\teventConfig = listEventConfig.shift();\n\t\t\tif (eventConfig === undefined) break;\n\n\t\t\teventConfig.once = true;\n\t\t\t$addListenerToEvent.call(this, eventConfig);\n\t\t}\n\n\t\treturn function() {\n\t\t\tthis.removeListeners(events, callback, context);\n\t\t};\n\t}\n\n\tfunction removeAllListenersOfName(eventName) {\n\t\tif (!(this.$callbacks && this.$callbacks[eventName])) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn delete this.$callbacks[eventName];\n\t}\n\n\tfunction $removeListenersOfName(eventName, callback, context) {\n\t\tif (!callback) {\n\t\t\treturn removeAllListenersOfName.call(this, eventName);\n\t\t}\n\n\t\tvar listenerList = $getEventListeners.call(this, eventName),\n\t\t\tnewList = [],\n\t\t\tindex = 0,\n\t\t\tlen = listenerList.length,\n\t\t\teventConfig;\n\n\t\tif (context === undefined) {\n\t\t\tcontext = null;\n\t\t}\n\n\t\tfor (; index < len; index++) {\n\t\t\teventConfig = listenerList[index];\n\n\t\t\tif (callback === eventConfig.callback && (context === null || context === eventConfig.context)) continue;\n\n\t\t\tnewList.push(listenerList[index]);\n\t\t}\n\n\t\tthis.$callbacks[eventName] = newList;\n\n\t\treturn true;\n\t}\n\n\tfunction removeListeners(events, callback, context) {\n\t\tif (!(events || callback)) {\n\t\t\tdelete this.$callbacks;\n\t\t\treturn this;\n\t\t}\n\n\t\tvar eventList = _getEventNames(events),\n\t\t\tresult = true,\n\t\t\teventName;\n\n\t\twhile (true) {\n\t\t\teventName = eventList.shift();\n\t\t\tif (eventName === undefined) break;\n\n\t\t\tresult = result && $removeListenersOfName.call(this, eventName, callback, context);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * @return {Boolean} False if a handler stopped the events, true otherwise\n\t */\n\tfunction $triggerEventsOfName(eventName, params) {\n\t\tvar listeners = $getEventListeners.call(this, eventName),\n\t\t\tlen = listeners.length;\n\n\t\tif (len === 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\tvar paramsLen = params.length,\n\t\t\tresult = true,\n\t\t\tindex = 0,\n\t\t\targs = [],\n\t\t\teventConfig;\n\n\t\tfor (; index < len; index++) {\n\t\t\teventConfig = listeners[index];\n\n\t\t\tif (eventConfig === undefined) continue;\n\n\t\t\targs.length = 0;\n\n\t\t\tif (eventConfig.params !== false) {\n\t\t\t\targs = args.concat(eventConfig.params);\n\t\t\t}\n\n\t\t\tif (paramsLen !== 0) {\n\t\t\t\targs = args.concat(params);\n\t\t\t}\n\n\t\t\tif (eventConfig.once) {\n\t\t\t\t$removeListenersOfName.call(this, eventName, eventConfig.callback, eventConfig.context);\n\t\t\t}\n\n\t\t\tresult = eventConfig.callback.apply(eventConfig.context, args);\n\n\t\t\tif (result === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction triggerEvents(events) {\n\t\tif (this.pauseEvents) {\n\t\t\treturn this;\n\t\t}\n\n\t\tvar eventList = _getEventNames(events),\n\t\t\tmax = eventList.length,\n\t\t\tresult = true,\n\t\t\tparams = arguments.length > 1 ? slice.call(arguments, 1) : [],\n\t\t\tindex = 0,\n\t\t\teventName;\n\n\t\tfor (; index < max; index++) {\n\t\t\teventName = eventList[index];\n\n\t\t\tif (!eventName) continue;\n\n\t\t\tresult = $triggerEventsOfName.call(this, eventName, params);\n\n\t\t\t// if (result === false) break;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tEventEmitter.prototype = {\n\t\tconstructor: EventEmitter,\n\n\t\tpauseEvents: false,\n\n\t\t/**\n\t\t * Returns the list of registered callbacks\n\t\t * @return {Object}\n\t\t */\n\t\tgetListeners: function() {\n\t\t\treturn $getEventListeners.apply(this, arguments);\n\t\t},\n\n\t\t/**\n\t\t * Remove all listeners of `events`\n\t\t */\n\t\tclearListeners: removeListeners,\n\n\t\t/**\n\t\t * Adds event listeners\n\t\t * @param {String} events\t\t\tEvent name or names, e.g.'click save', or a special catch-all event name: `all`\n\t\t * @param {Function} callback\t\tEvent callback\n\t\t * @param {Object} context\t\t\tContext where the callback should be called\n\t\t * @param params...\t\t\t\t\tExtra event arguments\n\t\t */\n\t\ton: addListeners,\n\n\t\t/**\n\t\t * Removes an event listener. The parameters must be identical to ones passed\n\t\t * to {@link #addListener}\n\t\t *\n\t\t * @param {String} events\n\t\t * @param {Function} callback\n\t\t * @param {Object} context\n\t\t */\n\t\toff: removeListeners,\n\n\t\t/**\n\t\t * Event trigger\n\t\t * @param {String} events\n\t\t * @param params...\n\t\t */\n\t\temit: triggerEvents,\n\n\t\t/**\n\t\t * Listen to an event and drop listener once it happens.\n\t\t * This method follows the same rules of {@link #addListener}\n\t\t * @param {String} ename        Event to bind\n\t\t * @param {Function} fn         Event handler\n\t\t * @param {Object} scope        Scope where the handler will be called\n\t\t */\n\t\tonce: addOnceListeners,\n\n\t\t/**\n\t\t * Suspend events\n\t\t */\n\t\tsuspendEvents: function() {\n\t\t\tthis.pauseEvents = true;\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Continue events\n\t\t */\n\t\tresumeEvents: function() {\n\t\t\tthis.pauseEvents = false;\n\t\t\treturn this;\n\t\t}\n\t};\n\n\tfunction factory() {\n\t\treturn EventEmitter;\n\t}\n\n\tif (typeof global.angular !== 'undefined' && global.angular.module) {\n\t\tglobal.angular.module('EventEmitter', []).factory('EventEmitter', factory);\n\t} else if (typeof define === 'function' && define.amd) {\n\t\tdefine(factory);\n\t} else if (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = EventEmitter;\n\t} else {\n\t\tglobal.EventEmitter = EventEmitter;\n\t}\n\n})(this);\n"],"sourceRoot":"/source/"}